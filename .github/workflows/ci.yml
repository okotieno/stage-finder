name: CI

on:
  push:
    branches:
      - prod
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    env:
      FS_ENVIRONMENT: ${{ secrets.FS_ENVIRONMENT }}
      FS_DATABASE_DIALECT: ${{ secrets.FS_DATABASE_DIALECT }}
      FS_DATABASE_HOST: ${{ secrets.FS_DATABASE_HOST }}
      FS_DATABASE_PORT: ${{ secrets.FS_DATABASE_PORT }}
      FS_DATABASE_USERNAME: ${{ secrets.FS_DATABASE_USERNAME }}
      FS_DATABASE_PASSWORD: ${{ secrets.FS_DATABASE_PASSWORD }}
      FS_DATABASE_DATABASE: ${{ secrets.FS_DATABASE_DATABASE }}
      FS_BACKEND_PORT: ${{ secrets.FS_BACKEND_PORT }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2
        with:
          version: 8


      # Connect your workspace on nx.app and uncomment this to enable task distribution.
      # The "--stop-agents-after" is optional, but allows idle agents to shut down once the "build" targets have been requested
      #      - run: pnpm exec nx-cloud start-ci-run --distribute-on="5 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: pnpm exec nx-cloud record -- echo Hello World
      - run: pnpm nx-cloud record -- pnpm nx affected -t lint
      - run: pnpm nx-cloud record -- pnpm nx affected -t test
      - run: pnpm nx-cloud record -- pnpm nx affected -t build

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image to GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/stage-finder-backend:latest

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/${{ github.repository_owner }}/stage-finder-backend:latest
            docker stop stage_finder_backend || true
            docker rm stage_finder_backend || true
            docker run -d --name stage_finder_backend \
            -e FS_ENVIRONMENT=${{ env.FS_ENVIRONMENT }} \
            -e FS_DATABASE_DIALECT=${{ env.FS_DATABASE_DIALECT }} \
            -e FS_DATABASE_HOST=${{ env.FS_DATABASE_HOST }} \
            -e FS_DATABASE_PORT=${{ env.FS_DATABASE_PORT }} \
            -e FS_DATABASE_USERNAME=${{ env.FS_DATABASE_USERNAME }} \
            -e FS_DATABASE_PASSWORD=${{ env.FS_DATABASE_PASSWORD }} \
            -e FS_DATABASE_DATABASE=${{ env.FS_DATABASE_DATABASE }} \
            -e FS_BACKEND_PORT=${{ env.FS_BACKEND_PORT }} \
            --link stage_finder_postgres_db:postgres \
            -l "traefik.http.routers.stage_finder_backend.rule=Host(\`furahasolutions.tech\`) && PathPrefix(\`/stage_finder_backend\`)" \
            -l "traefik.http.routers.stage_finder_backend.middlewares=stage_finder_backendpathstrip@docker" \
            -l "traefik.http.middlewares.stage_finder_backendpathstrip.stripprefix.prefixes=/stage_finder_backend" \
            -l "traefik.http.middlewares.stage_finder_backend.stripprefix.prefixes=/stage_finder_backend" \
            -l "traefik.http.routers.stage_finder_backend.service=stage_finder_backend"  \
            -l "traefik.http.services.stage_finder_backend.loadbalancer.server.port=${{ env.FS_BACKEND_PORT }}"  \
            -l "traefik.http.routers.stage_finder_backend.tls=true"  \
            -l "traefik.http.routers.stage_finder_backend.tls.certresolver=certresolver"  \
            ghcr.io/${{ github.repository_owner }}/stage-finder-backend:latest
